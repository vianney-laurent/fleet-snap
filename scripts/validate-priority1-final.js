#!/usr/bin/env node
// scripts/validate-priority1-final.js
// Validation finale des am√©liorations priorit√© 1

const fs = require('fs');
const path = require('path');

console.log('üîç Validation finale des am√©liorations priorit√© 1...\n');

const improvements = [
  {
    name: 'üîê Gestion de Session Robuste',
    files: [
      { path: 'lib/sessionManager.js', required: ['SessionManager', 'useSessionManager', 'scheduleRefresh'] },
      { path: 'pages/inventory.js', required: ['useSessionManager', 'session'] }
    ]
  },
  {
    name: '‚úÖ Validation C√¥t√© Client',
    files: [
      { path: 'lib/clientValidator.js', required: ['ImageValidator', 'FormValidator', 'useFormValidation'] },
      { path: 'pages/inventory.js', required: ['validateField', 'validationResults'] }
    ]
  },
  {
    name: 'üì∂ Indicateurs de Connectivit√©',
    files: [
      { path: 'lib/connectivityManager.js', required: ['ConnectivityManager', 'useConnectivity', 'addToOfflineQueue'] },
      { path: 'components/ConnectivityIndicator.js', required: ['ConnectivityIndicator', 'ConnectivityBanner', 'ConnectivityDot'] },
      { path: 'pages/inventory.js', required: ['useConnectivity', 'ConnectivityBanner'] },
      { path: 'components/Header.js', required: ['ConnectivityDot'] },
      { path: 'pages/admin.js', required: ['ConnectivityIndicator'] }
    ]
  }
];

let totalChecks = 0;
let passedChecks = 0;
let allPassed = true;

for (const improvement of improvements) {
  console.log(`üìã ${improvement.name}`);
  
  for (const fileCheck of improvement.files) {
    const filePath = path.join(process.cwd(), fileCheck.path);
    
    if (!fs.existsSync(filePath)) {
      console.log(`  ‚ùå Fichier manquant: ${fileCheck.path}`);
      allPassed = false;
      continue;
    }
    
    const content = fs.readFileSync(filePath, 'utf8');
    
    for (const required of fileCheck.required) {
      totalChecks++;
      if (content.includes(required)) {
        console.log(`  ‚úÖ ${required} trouv√© dans ${fileCheck.path}`);
        passedChecks++;
      } else {
        console.log(`  ‚ùå ${required} manquant dans ${fileCheck.path}`);
        allPassed = false;
      }
    }
  }
  console.log('');
}

// V√©rifications fonctionnelles sp√©cifiques
console.log('üîß V√©rifications fonctionnelles...\n');

// V√©rifier l'int√©gration session dans inventory.js
const inventoryPath = path.join(process.cwd(), 'pages/inventory.js');
if (fs.existsSync(inventoryPath)) {
  const inventoryContent = fs.readFileSync(inventoryPath, 'utf8');
  
  totalChecks += 3;
  
  if (inventoryContent.includes('session') && inventoryContent.includes('sessionLoading')) {
    console.log('  ‚úÖ Gestion de session int√©gr√©e dans inventory');
    passedChecks++;
  } else {
    console.log('  ‚ùå Gestion de session non int√©gr√©e dans inventory');
    allPassed = false;
  }
  
  if (inventoryContent.includes('validateField') && inventoryContent.includes('validation.valid')) {
    console.log('  ‚úÖ Validation c√¥t√© client int√©gr√©e dans inventory');
    passedChecks++;
  } else {
    console.log('  ‚ùå Validation c√¥t√© client non int√©gr√©e dans inventory');
    allPassed = false;
  }
  
  if (inventoryContent.includes('addToQueue') && inventoryContent.includes('isOnline')) {
    console.log('  ‚úÖ Gestion hors ligne int√©gr√©e dans inventory');
    passedChecks++;
  } else {
    console.log('  ‚ùå Gestion hors ligne non int√©gr√©e dans inventory');
    allPassed = false;
  }
}

// V√©rifier l'int√©gration dans Header.js
const headerPath = path.join(process.cwd(), 'components/Header.js');
if (fs.existsSync(headerPath)) {
  const headerContent = fs.readFileSync(headerPath, 'utf8');
  
  totalChecks++;
  
  if (headerContent.includes('ConnectivityDot') && headerContent.includes('<ConnectivityDot')) {
    console.log('  ‚úÖ Indicateur de connectivit√© int√©gr√© dans Header');
    passedChecks++;
  } else {
    console.log('  ‚ùå Indicateur de connectivit√© non int√©gr√© dans Header');
    allPassed = false;
  }
}

// V√©rifier l'int√©gration dans admin.js
const adminPath = path.join(process.cwd(), 'pages/admin.js');
if (fs.existsSync(adminPath)) {
  const adminContent = fs.readFileSync(adminPath, 'utf8');
  
  totalChecks++;
  
  if (adminContent.includes('ConnectivityIndicator') && adminContent.includes('<ConnectivityIndicator')) {
    console.log('  ‚úÖ Indicateur de connectivit√© int√©gr√© dans Admin');
    passedChecks++;
  } else {
    console.log('  ‚ùå Indicateur de connectivit√© non int√©gr√© dans Admin');
    allPassed = false;
  }
}

console.log('\n' + '='.repeat(60));
console.log(`üìä R√©sultats: ${passedChecks}/${totalChecks} v√©rifications r√©ussies`);
console.log(`üìà Taux de r√©ussite: ${((passedChecks / totalChecks) * 100).toFixed(1)}%`);

if (allPassed) {
  console.log('\nüéâ Toutes les am√©liorations priorit√© 1 sont impl√©ment√©es !');
  console.log('\n‚ú® Fonctionnalit√©s ajout√©es:');
  console.log('  üîê Auto-refresh des sessions + d√©tection d\'expiration');
  console.log('  ‚úÖ Validation imm√©diate c√¥t√© client avec feedback');
  console.log('  üì∂ Indicateurs de connectivit√© + queue hors ligne');
  console.log('  üîÑ Gestion automatique des uploads hors ligne');
  console.log('  üì± Banni√®res et notifications de statut r√©seau');
  
  console.log('\nüß™ Tests recommand√©s:');
  console.log('  1. Tester l\'upload avec/sans connexion');
  console.log('  2. V√©rifier les validations de fichiers');
  console.log('  3. Observer les indicateurs de connectivit√©');
  console.log('  4. Tester l\'auto-refresh de session');
  
  process.exit(0);
} else {
  console.log('\n‚ö†Ô∏è  Certaines am√©liorations sont incompl√®tes.');
  console.log('\nüìù Actions recommand√©es:');
  console.log('1. V√©rifier les fichiers manquants');
  console.log('2. Compl√©ter les int√©grations manquantes');
  console.log('3. Tester les fonctionnalit√©s impl√©ment√©es');
  console.log('4. Relancer ce script pour validation');
  process.exit(1);
}